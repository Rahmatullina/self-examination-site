from django.db import models
from datetime import datetime
from django.contrib.auth.models import AbstractUser
from django import forms

SERVICE_CHOICES = [
        ('Да', 'Да'),
        ('Не предусмотрено', 'Не предусмотрено'),
        ('Нет', 'Нет'),
]
REGION_CHOICES = [('Абзелиловский район РБ', 'Абзелиловский район РБ'), ('Агидель РБ', 'Агидель РБ'), ('Альшеевский район РБ', 'Альшеевский район РБ'), ('Архангельский район РБ', 'Архангельский район РБ'),
                    ('Аскинский район РБ', 'Аскинский район РБ'), ('Аургазинский район РБ', 'Аургазинский район РБ'), ('Баймакский район РБ', 'Баймакский район РБ'), ('Бакалинский район РБ', 'Бакалинский район РБ'),
                    ('Балтачевский район РБ', 'Балтачевский район РБ'), ('Белебеевский район РБ', 'Белебеевский район РБ'), ('Белокатайский район РБ', 'Белокатайский район РБ'), ('Белорецкий район РБ', 'Белорецкий район РБ'),
                    ('Бижбулякский район РБ', 'Бижбулякский район РБ'), ('Бирский район РБ', 'Бирский район РБ'), ('Благоварский район РБ', 'Благоварский район РБ'), ('Благовещенский район РБ', 'Благовещенский район РБ'),
                     ('Буздякский район РБ', 'Буздякский район РБ'), ('Бураевский район РБ', 'Бураевский район РБ'), ('Бурзянский район РБ', 'Бурзянский район РБ'), ('Гафурийский район РБ', 'Гафурийский район РБ'),
                      ('Давлекановский район РБ', 'Давлекановский район РБ'), ('Дуванский район РБ', 'Дуванский район РБ'), ('Дюртюлинский район РБ', 'Дюртюлинский район РБ'), ('Ермекеевский район', 'Ермекеевский район'),
                       ('Зианчуринский район РБ', 'Зианчуринский район РБ'), ('Зилаирский район РБ', 'Зилаирский район РБ'), ('Иглинский район РБ', 'Иглинский район РБ'), ('Илишевский район РБ', 'Илишевский район РБ'),
                        ('Ишимбайский район РБ', 'Ишимбайский район РБ'), ('Калтасинский район РБ', 'Калтасинский район РБ'), ('Караидельский район РБ', 'Караидельский район РБ'), ('Кармаскалинский район РБ', 'Кармаскалинский район РБ'),
                         ('Кигинский район РБ', 'Кигинский район РБ'), ('Краснокамский район РБ', 'Краснокамский район РБ'), ('Кугарчинский район РБ', 'Кугарчинский район РБ'), ('Кумертау', 'Кумертау'), ('Кушнаренковский район РБ', 'Кушнаренковский район РБ'),
                          ('Куюргазинский район РБ', 'Куюргазинский район РБ'), ('Межгорье', 'Межгорье'), ('Мелеузовский район РБ', 'Мелеузовский район РБ'), ('Мечетлинский район РБ', 'Мечетлинский район РБ'), ('Мишкинский район РБ', 'Мишкинский район РБ'),
                           ('Миякинский район РБ', 'Миякинский район РБ'), ('Нефтекамск', 'Нефтекамск'), ('Нуримановский район РБ', 'Нуримановский район РБ'), ('Октябрьский', 'Октябрьский'), ('Салават', 'Салават'), ('Салаватский район РБ', 'Салаватский район РБ'),
                            ('Сибай', 'Сибай'), ('Стерлибашевский район РБ', 'Стерлибашевский район РБ'), ('Стерлитамак', 'Стерлитамак'), ('Стерлитамакский район РБ', 'Стерлитамакский район РБ'), ('Татышлинский район РБ', 'Татышлинский район РБ'),
                             ('Туймазинский район РБ', 'Туймазинский район РБ'), ('Уфа', 'Уфа'), ('Уфимский район РБ', 'Уфимский район РБ'), ('Учалинский район РБ', 'Учалинский район РБ'), ('Федоровский район РБ', 'Федоровский район РБ'),
                              ('Хайбуллинский район РБ', 'Хайбуллинский район РБ'), ('Чекмагушевский район РБ', 'Чекмагушевский район РБ'), ('Чишминский район РБ', 'Чишминский район РБ'), ('Шаранский район РБ', 'Шаранский район РБ'), ('Янаульский район РБ', 'Янаульский район РБ')]

# Create your models here.
class RegionModel(models.Model):

    id = models.AutoField(primary_key=True)
    region_name = models.CharField(max_length=200, choices=REGION_CHOICES, default='Уфа')
    year = models.CharField(default=datetime.today().strftime('%Y'), max_length=4)
    month = models.CharField(default=datetime.today().strftime('%m'), max_length=2)
    day = models.CharField(default=datetime.today().strftime('%d'),max_length=2)
    time = models.TimeField(default=datetime.today().time())

    residential_premises_id_rgmu = models.CharField(max_length=1000,default='111')
    residential_premises_statement_amount = models.CharField(max_length=100, default='0')
    residential_premises_link = models.CharField(max_length=1000, default='my_link')
    residential_premises_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    residential_premises_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_btn_get_service_comment = models.TextField(default='',blank=True)
    residential_premises_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_reglament_comment = models.TextField(default='',blank=True)
    residential_premises_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_estimation_quality_comment = models.TextField(default='',blank=True)
    residential_premises_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    residential_premises_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    residential_premises_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_edition_draft_comment = models.TextField(default='',blank=True)
    residential_premises_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    residential_premises_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    residential_premises_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    residential_premises_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_sample_document_comment = models.TextField(default='',blank=True)
    residential_premises_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    residential_premises_has_document_template_comment = models.TextField(default='',blank=True)

    housing_transfer_id_rgmu = models.CharField(max_length=1000,default='111')
    housing_transfer_statement_amount = models.CharField(max_length=100, default='0')
    housing_transfer_link = models.CharField(max_length=1000, default='my_link')
    housing_transfer_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    housing_transfer_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_btn_get_service_comment = models.TextField(default='',blank=True)
    housing_transfer_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_reglament_comment = models.TextField(default='',blank=True)
    housing_transfer_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_estimation_quality_comment = models.TextField(default='',blank=True)
    housing_transfer_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    housing_transfer_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    housing_transfer_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_edition_draft_comment = models.TextField(default='',blank=True)
    housing_transfer_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    housing_transfer_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    housing_transfer_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    housing_transfer_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_sample_document_comment = models.TextField(default='',blank=True)
    housing_transfer_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    housing_transfer_has_document_template_comment = models.TextField(default='',blank=True)

    advertising_structures_id_rgmu = models.CharField(max_length=1000, default='111')
    advertising_structures_statement_amount = models.CharField(max_length=100, default='0')
    advertising_structures_link = models.CharField(max_length=1000, default='my_link')
    advertising_structures_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    advertising_structures_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_btn_get_service_comment = models.TextField(default='',blank=True)
    advertising_structures_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_reglament_comment = models.TextField(default='',blank=True)
    advertising_structures_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_estimation_quality_comment = models.TextField(default='',blank=True)
    advertising_structures_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    advertising_structures_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    advertising_structures_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_edition_draft_comment = models.TextField(default='',blank=True)
    advertising_structures_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    advertising_structures_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    advertising_structures_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    advertising_structures_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_sample_document_comment = models.TextField(default='',blank=True)
    advertising_structures_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    advertising_structures_has_document_template_comment = models.TextField(default='',blank=True)

    capital_construction_id_rgmu = models.CharField(max_length=1000, default='111')
    capital_construction_statement_amount = models.CharField(max_length=100, default='0')
    capital_construction_link = models.CharField(max_length=1000, default='my_link')
    capital_construction_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    capital_construction_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_btn_get_service_comment = models.TextField(default='',blank=True)
    capital_construction_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_reglament_comment = models.TextField(default='',blank=True)
    capital_construction_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_estimation_quality_comment = models.TextField(default='',blank=True)
    capital_construction_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    capital_construction_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    capital_construction_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_edition_draft_comment = models.TextField(default='',blank=True)
    capital_construction_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    capital_construction_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    capital_construction_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    capital_construction_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_sample_document_comment = models.TextField(default='',blank=True)
    capital_construction_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    capital_construction_has_document_template_comment = models.TextField(default='',blank=True)

    preschool_education_id_rgmu = models.CharField(max_length=1000, default='111')
    preschool_education_statement_amount = models.CharField(max_length=100, default='0')
    preschool_education_link = models.CharField(max_length=1000, default='my_link')
    preschool_education_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    preschool_education_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_btn_get_service_comment = models.TextField(default='',blank=True)
    preschool_education_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_reglament_comment = models.TextField(default='',blank=True)
    preschool_education_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_estimation_quality_comment = models.TextField(default='',blank=True)
    preschool_education_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    preschool_education_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    preschool_education_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_edition_draft_comment = models.TextField(default='',blank=True)
    preschool_education_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    preschool_education_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    preschool_education_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    preschool_education_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_sample_document_comment = models.TextField(default='',blank=True)
    preschool_education_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    preschool_education_has_document_template_comment = models.TextField(default='',blank=True)

    school_education_id_rgmu = models.CharField(max_length=1000, default='111')
    school_education_statement_amount = models.CharField(max_length=100, default='0')
    school_education_link = models.CharField(max_length=1000, default='my_link')
    school_education_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    school_education_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_btn_get_service_comment = models.TextField(default='',blank=True)
    school_education_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_reglament_comment = models.TextField(default='',blank=True)
    school_education_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_estimation_quality_comment = models.TextField(default='',blank=True)
    school_education_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    school_education_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    school_education_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_edition_draft_comment = models.TextField(default='',blank=True)
    school_education_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    school_education_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    school_education_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    school_education_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_sample_document_comment = models.TextField(default='',blank=True)
    school_education_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    school_education_has_document_template_comment = models.TextField(default='',blank=True)

    needing_premises_id_rgmu = models.CharField(max_length=1000, default='111')
    needing_premises_statement_amount = models.CharField(max_length=100, default='0')
    needing_premises_link = models.CharField(max_length=1000, default='my_link')
    needing_premises_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    needing_premises_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_btn_get_service_comment = models.TextField(default='',blank=True)
    needing_premises_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_reglament_comment = models.TextField(default='',blank=True)
    needing_premises_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_estimation_quality_comment = models.TextField(default='',blank=True)
    needing_premises_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    needing_premises_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    needing_premises_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_edition_draft_comment = models.TextField(default='',blank=True)
    needing_premises_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    needing_premises_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    needing_premises_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    needing_premises_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_sample_document_comment = models.TextField(default='',blank=True)
    needing_premises_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    needing_premises_has_document_template_comment = models.TextField(default='',blank=True)

    town_planning_id_rgmu = models.CharField(max_length=1000, default='111')
    town_planning_statement_amount = models.CharField(max_length=100, default='0')
    town_planning_link = models.CharField(max_length=1000, default='my_link')
    town_planning_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    town_planning_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_btn_get_service_comment = models.TextField(default='',blank=True)
    town_planning_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_reglament_comment = models.TextField(default='',blank=True)
    town_planning_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_estimation_quality_comment = models.TextField(default='',blank=True)
    town_planning_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    town_planning_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    town_planning_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_edition_draft_comment = models.TextField(default='',blank=True)
    town_planning_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    town_planning_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    town_planning_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    town_planning_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_sample_document_comment = models.TextField(default='',blank=True)
    town_planning_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    town_planning_has_document_template_comment = models.TextField(default='',blank=True)

    archive_reference_id_rgmu = models.CharField(max_length=1000, default='111')
    archive_reference_statement_amount = models.CharField(max_length=100, default='0')
    archive_reference_link = models.CharField(max_length=1000, default='my_link')
    archive_reference_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    archive_reference_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_btn_get_service_comment = models.TextField(default='',blank=True)
    archive_reference_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_reglament_comment = models.TextField(default='',blank=True)
    archive_reference_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_estimation_quality_comment = models.TextField(default='',blank=True)
    archive_reference_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    archive_reference_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    archive_reference_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_edition_draft_comment = models.TextField(default='',blank=True)
    archive_reference_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    archive_reference_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    archive_reference_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    archive_reference_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_sample_document_comment = models.TextField(default='',blank=True)
    archive_reference_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    archive_reference_has_document_template_comment = models.TextField(default='',blank=True)

    land_schemes_id_rgmu = models.CharField(max_length=1000, default='111')
    land_schemes_statement_amount = models.CharField(max_length=100, default='0')
    land_schemes_link = models.CharField(max_length=1000, default='my_link')
    land_schemes_has_advanced_appointment = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_advanced_appointment_comment = models.TextField(default='',blank=True)
    land_schemes_has_btn_get_service = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_btn_get_service_comment = models.TextField(default='',blank=True)
    land_schemes_has_reglament = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_reglament_comment = models.TextField(default='',blank=True)
    land_schemes_has_estimation_quality = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_estimation_quality_comment = models.TextField(default='',blank=True)
    land_schemes_connected_to_fgis_do = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_connected_to_fgis_do_comment = models.TextField(default='',blank=True)
    land_schemes_has_electronic_form_printing = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_electronic_form_printing_comment = models.TextField(default='',blank=True)
    land_schemes_has_edition_draft = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_edition_draft_comment = models.TextField(default='',blank=True)
    land_schemes_has_term_of_consideration = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_term_of_consideration_comment = models.TextField(default='',blank=True)
    land_schemes_has_notif_consider_result = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_notif_consider_result_comment = models.TextField(default='',blank=True)
    land_schemes_has_causes_of_failure = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_causes_of_failure_comment = models.TextField(default='',blank=True)
    land_schemes_has_sample_document = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_sample_document_comment = models.TextField(default='',blank=True)
    land_schemes_has_document_template = models.CharField(max_length=20, choices=SERVICE_CHOICES, default='Да')
    land_schemes_has_document_template_comment = models.TextField(default='',blank=True)

    def __str__(self):
        return self.region_name + self.year + self.month + self.day


class CustomUser(AbstractUser):
    region_name = models.CharField(max_length=500,choices=REGION_CHOICES)

