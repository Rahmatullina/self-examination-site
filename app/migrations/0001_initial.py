# Generated by Django 2.2.3 on 2019-08-14 10:22

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegionModel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('region_name', models.CharField(choices=[('Абзелиловский район РБ', 'Абзелиловский район РБ'), ('Агидель РБ', 'Агидель РБ'), ('Альшеевский район РБ', 'Альшеевский район РБ'), ('Архангельский район РБ', 'Архангельский район РБ'), ('Аскинский район РБ', 'Аскинский район РБ'), ('Аургазинский район РБ', 'Аургазинский район РБ'), ('Баймакский район РБ', 'Баймакский район РБ'), ('Бакалинский район РБ', 'Бакалинский район РБ'), ('Балтачевский район РБ', 'Балтачевский район РБ'), ('Белебеевский район РБ', 'Белебеевский район РБ'), ('Белокатайский район РБ', 'Белокатайский район РБ'), ('Белорецкий район РБ', 'Белорецкий район РБ'), ('Бижбулякский район РБ', 'Бижбулякский район РБ'), ('Бирский район РБ', 'Бирский район РБ'), ('Благоварский район РБ', 'Благоварский район РБ'), ('Благовещенский район РБ', 'Благовещенский район РБ'), ('Буздякский район РБ', 'Буздякский район РБ'), ('Бураевский район РБ', 'Бураевский район РБ'), ('Бурзянский район РБ', 'Бурзянский район РБ'), ('Гафурийский район РБ', 'Гафурийский район РБ'), ('Давлекановский район РБ', 'Давлекановский район РБ'), ('Дуванский район РБ', 'Дуванский район РБ'), ('Дюртюлинский район РБ', 'Дюртюлинский район РБ'), ('Ермекеевский район', 'Ермекеевский район'), ('Зианчуринский район РБ', 'Зианчуринский район РБ'), ('Зилаирский район РБ', 'Зилаирский район РБ'), ('Иглинский район РБ', 'Иглинский район РБ'), ('Илишевский район РБ', 'Илишевский район РБ'), ('Ишимбайский район РБ', 'Ишимбайский район РБ'), ('Калтасинский район РБ', 'Калтасинский район РБ'), ('Караидельский район РБ', 'Караидельский район РБ'), ('Кармаскалинский район РБ', 'Кармаскалинский район РБ'), ('Кигинский район РБ', 'Кигинский район РБ'), ('Краснокамский район РБ', 'Краснокамский район РБ'), ('Кугарчинский район РБ', 'Кугарчинский район РБ'), ('Кумертау', 'Кумертау'), ('Кушнаренковский район РБ', 'Кушнаренковский район РБ'), ('Куюргазинский район РБ', 'Куюргазинский район РБ'), ('Межгорье', 'Межгорье'), ('Мелеузовский район РБ', 'Мелеузовский район РБ'), ('Мечетлинский район РБ', 'Мечетлинский район РБ'), ('Мишкинский район РБ', 'Мишкинский район РБ'), ('Миякинский район РБ', 'Миякинский район РБ'), ('Нефтекамск', 'Нефтекамск'), ('Нуримановский район РБ', 'Нуримановский район РБ'), ('Октябрьский', 'Октябрьский'), ('Салават', 'Салават'), ('Салаватский район РБ', 'Салаватский район РБ'), ('Сибай', 'Сибай'), ('Стерлибашевский район РБ', 'Стерлибашевский район РБ'), ('Стерлитамак', 'Стерлитамак'), ('Стерлитамакский район РБ', 'Стерлитамакский район РБ'), ('Татышлинский район РБ', 'Татышлинский район РБ'), ('Туймазинский район РБ', 'Туймазинский район РБ'), ('Уфа', 'Уфа'), ('Уфимский район РБ', 'Уфимский район РБ'), ('Учалинский район РБ', 'Учалинский район РБ'), ('Федоровский район РБ', 'Федоровский район РБ'), ('Хайбуллинский район РБ', 'Хайбуллинский район РБ'), ('Чекмагушевский район РБ', 'Чекмагушевский район РБ'), ('Чишминский район РБ', 'Чишминский район РБ'), ('Шаранский район РБ', 'Шаранский район РБ'), ('Янаульский район РБ', 'Янаульский район РБ')], default='Уфа', max_length=200)),
                ('year', models.CharField(default='2019', max_length=4)),
                ('month', models.CharField(default='01', max_length=2)),
                ('day', models.CharField(default='01', max_length=2)),
                ('time', models.TimeField(default=datetime.time(15, 22, 9, 341752))),
                ('residential_premises_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('residential_premises_statement_amount', models.CharField(default='0', max_length=100)),
                ('residential_premises_link', models.CharField(default='my_link', max_length=1000)),
                ('residential_premises_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_reglament_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('residential_premises_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('residential_premises_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('residential_premises_has_document_template_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('housing_transfer_statement_amount', models.CharField(default='0', max_length=100)),
                ('housing_transfer_link', models.CharField(default='my_link', max_length=1000)),
                ('housing_transfer_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_reglament_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('housing_transfer_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('housing_transfer_has_document_template_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('advertising_structures_statement_amount', models.CharField(default='0', max_length=100)),
                ('advertising_structures_link', models.CharField(default='my_link', max_length=1000)),
                ('advertising_structures_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_reglament_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('advertising_structures_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('advertising_structures_has_document_template_comment', models.TextField(blank=True, default='')),
                ('capital_construction_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('capital_construction_statement_amount', models.CharField(default='0', max_length=100)),
                ('capital_construction_link', models.CharField(default='my_link', max_length=1000)),
                ('capital_construction_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_reglament_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('capital_construction_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('capital_construction_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('capital_construction_has_document_template_comment', models.TextField(blank=True, default='')),
                ('preschool_education_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('preschool_education_statement_amount', models.CharField(default='0', max_length=100)),
                ('preschool_education_link', models.CharField(default='my_link', max_length=1000)),
                ('preschool_education_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_reglament_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('preschool_education_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('preschool_education_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('preschool_education_has_document_template_comment', models.TextField(blank=True, default='')),
                ('school_education_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('school_education_statement_amount', models.CharField(default='0', max_length=100)),
                ('school_education_link', models.CharField(default='my_link', max_length=1000)),
                ('school_education_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('school_education_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('school_education_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_reglament_comment', models.TextField(blank=True, default='')),
                ('school_education_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('school_education_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('school_education_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('school_education_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('school_education_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('school_education_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('school_education_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('school_education_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('school_education_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('school_education_has_document_template_comment', models.TextField(blank=True, default='')),
                ('needing_premises_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('needing_premises_statement_amount', models.CharField(default='0', max_length=100)),
                ('needing_premises_link', models.CharField(default='my_link', max_length=1000)),
                ('needing_premises_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_reglament_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('needing_premises_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('needing_premises_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('needing_premises_has_document_template_comment', models.TextField(blank=True, default='')),
                ('town_planning_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('town_planning_statement_amount', models.CharField(default='0', max_length=100)),
                ('town_planning_link', models.CharField(default='my_link', max_length=1000)),
                ('town_planning_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_reglament_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('town_planning_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('town_planning_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('town_planning_has_document_template_comment', models.TextField(blank=True, default='')),
                ('archive_reference_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('archive_reference_statement_amount', models.CharField(default='0', max_length=100)),
                ('archive_reference_link', models.CharField(default='my_link', max_length=1000)),
                ('archive_reference_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_reglament_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('archive_reference_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('archive_reference_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('archive_reference_has_document_template_comment', models.TextField(blank=True, default='')),
                ('land_schemes_id_RGMU', models.CharField(default='111', max_length=1000)),
                ('land_schemes_statement_amount', models.CharField(default='0', max_length=100)),
                ('land_schemes_link', models.CharField(default='my_link', max_length=1000)),
                ('land_schemes_has_advanced_appointment', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_advanced_appointment_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_btn_get_service', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_btn_get_service_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_reglament', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_reglament_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_estimation_quality', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_estimation_quality_comment', models.TextField(blank=True, default='')),
                ('land_schemes_connected_to_FGIS_DO', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_connected_to_FGIS_DO_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_electronic_form_printing', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_electronic_form_printing_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_edition_draft', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_edition_draft_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_term_of_consideration', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_term_of_consideration_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_notif_consider_result', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_notif_consider_result_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_causes_of_failure', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_causes_of_failure_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_sample_document', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_sample_document_comment', models.TextField(blank=True, default='')),
                ('land_schemes_has_document_template', models.CharField(choices=[('Да', 'Да'), ('Не предусмотрено', 'Не предусмотрено'), ('Нет', 'Нет')], default='Да', max_length=20)),
                ('land_schemes_has_document_template_comment', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('region_name', models.TextField(blank=True, max_length=500, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
